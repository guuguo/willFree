// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:free/bean/entity/pe_entity.dart';
import 'package:free/generated/json/pe_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case PeEntity:
				return peEntityFromJson(data as PeEntity, json) as T;
			case PeData:
				return peDataFromJson(data as PeData, json) as T;
			case PeQuantile:
				return peQuantileFromJson(data as PeQuantile, json) as T;
			case PeQuantileQuantiles:
				return peQuantileQuantilesFromJson(data as PeQuantileQuantiles, json) as T;
			case PeQuantileRecent10YearsQuantiles:
				return peQuantileRecent10YearsQuantilesFromJson(data as PeQuantileRecent10YearsQuantiles, json) as T;
			case PeQuantileMaxInAllHistory:
				return peQuantileMaxInAllHistoryFromJson(data as PeQuantileMaxInAllHistory, json) as T;
			case PeQuantileMinInAllHistory:
				return peQuantileMinInAllHistoryFromJson(data as PeQuantileMinInAllHistory, json) as T;
			case PeQuantileMaxInRecent10Years:
				return peQuantileMaxInRecent10YearsFromJson(data as PeQuantileMaxInRecent10Years, json) as T;
			case PeQuantileMinInRecent10Years:
				return peQuantileMinInRecent10YearsFromJson(data as PeQuantileMinInRecent10Years, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case PeEntity:
				return peEntityToJson(data as PeEntity);
			case PeData:
				return peDataToJson(data as PeData);
			case PeQuantile:
				return peQuantileToJson(data as PeQuantile);
			case PeQuantileQuantiles:
				return peQuantileQuantilesToJson(data as PeQuantileQuantiles);
			case PeQuantileRecent10YearsQuantiles:
				return peQuantileRecent10YearsQuantilesToJson(data as PeQuantileRecent10YearsQuantiles);
			case PeQuantileMaxInAllHistory:
				return peQuantileMaxInAllHistoryToJson(data as PeQuantileMaxInAllHistory);
			case PeQuantileMinInAllHistory:
				return peQuantileMinInAllHistoryToJson(data as PeQuantileMinInAllHistory);
			case PeQuantileMaxInRecent10Years:
				return peQuantileMaxInRecent10YearsToJson(data as PeQuantileMaxInRecent10Years);
			case PeQuantileMinInRecent10Years:
				return peQuantileMinInRecent10YearsToJson(data as PeQuantileMinInRecent10Years);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (PeEntity).toString()){
			return PeEntity().fromJson(json);
		}
		if(type == (PeData).toString()){
			return PeData().fromJson(json);
		}
		if(type == (PeQuantile).toString()){
			return PeQuantile().fromJson(json);
		}
		if(type == (PeQuantileQuantiles).toString()){
			return PeQuantileQuantiles().fromJson(json);
		}
		if(type == (PeQuantileRecent10YearsQuantiles).toString()){
			return PeQuantileRecent10YearsQuantiles().fromJson(json);
		}
		if(type == (PeQuantileMaxInAllHistory).toString()){
			return PeQuantileMaxInAllHistory().fromJson(json);
		}
		if(type == (PeQuantileMinInAllHistory).toString()){
			return PeQuantileMinInAllHistory().fromJson(json);
		}
		if(type == (PeQuantileMaxInRecent10Years).toString()){
			return PeQuantileMaxInRecent10Years().fromJson(json);
		}
		if(type == (PeQuantileMinInRecent10Years).toString()){
			return PeQuantileMinInRecent10Years().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<PeEntity>[] is M){
			return data.map<PeEntity>((e) => PeEntity().fromJson(e)).toList() as M;
		}
		if(<PeData>[] is M){
			return data.map<PeData>((e) => PeData().fromJson(e)).toList() as M;
		}
		if(<PeQuantile>[] is M){
			return data.map<PeQuantile>((e) => PeQuantile().fromJson(e)).toList() as M;
		}
		if(<PeQuantileQuantiles>[] is M){
			return data.map<PeQuantileQuantiles>((e) => PeQuantileQuantiles().fromJson(e)).toList() as M;
		}
		if(<PeQuantileRecent10YearsQuantiles>[] is M){
			return data.map<PeQuantileRecent10YearsQuantiles>((e) => PeQuantileRecent10YearsQuantiles().fromJson(e)).toList() as M;
		}
		if(<PeQuantileMaxInAllHistory>[] is M){
			return data.map<PeQuantileMaxInAllHistory>((e) => PeQuantileMaxInAllHistory().fromJson(e)).toList() as M;
		}
		if(<PeQuantileMinInAllHistory>[] is M){
			return data.map<PeQuantileMinInAllHistory>((e) => PeQuantileMinInAllHistory().fromJson(e)).toList() as M;
		}
		if(<PeQuantileMaxInRecent10Years>[] is M){
			return data.map<PeQuantileMaxInRecent10Years>((e) => PeQuantileMaxInRecent10Years().fromJson(e)).toList() as M;
		}
		if(<PeQuantileMinInRecent10Years>[] is M){
			return data.map<PeQuantileMinInRecent10Years>((e) => PeQuantileMinInRecent10Years().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}